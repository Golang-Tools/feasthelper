//
// Copyright 2021 The Feast Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: protos/feast/core/SavedDataset.proto

package core

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SavedDatasetSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the dataset. Must be unique since it's possible to overwrite dataset by name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Name of Feast project that this Dataset belongs to.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// list of feature references with format "<view name>:<feature name>"
	Features []string `protobuf:"bytes,3,rep,name=features,proto3" json:"features,omitempty"`
	// entity columns + request columns from all feature views used during retrieval
	JoinKeys []string `protobuf:"bytes,4,rep,name=join_keys,json=joinKeys,proto3" json:"join_keys,omitempty"`
	// Whether full feature names are used in stored data
	FullFeatureNames bool                 `protobuf:"varint,5,opt,name=full_feature_names,json=fullFeatureNames,proto3" json:"full_feature_names,omitempty"`
	Storage          *SavedDatasetStorage `protobuf:"bytes,6,opt,name=storage,proto3" json:"storage,omitempty"`
	// Optional and only populated if generated from a feature service fetch
	FeatureServiceName string `protobuf:"bytes,8,opt,name=feature_service_name,json=featureServiceName,proto3" json:"feature_service_name,omitempty"`
	// User defined metadata
	Tags map[string]string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SavedDatasetSpec) Reset() {
	*x = SavedDatasetSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_feast_core_SavedDataset_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SavedDatasetSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SavedDatasetSpec) ProtoMessage() {}

func (x *SavedDatasetSpec) ProtoReflect() protoreflect.Message {
	mi := &file_protos_feast_core_SavedDataset_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SavedDatasetSpec.ProtoReflect.Descriptor instead.
func (*SavedDatasetSpec) Descriptor() ([]byte, []int) {
	return file_protos_feast_core_SavedDataset_proto_rawDescGZIP(), []int{0}
}

func (x *SavedDatasetSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SavedDatasetSpec) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SavedDatasetSpec) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *SavedDatasetSpec) GetJoinKeys() []string {
	if x != nil {
		return x.JoinKeys
	}
	return nil
}

func (x *SavedDatasetSpec) GetFullFeatureNames() bool {
	if x != nil {
		return x.FullFeatureNames
	}
	return false
}

func (x *SavedDatasetSpec) GetStorage() *SavedDatasetStorage {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *SavedDatasetSpec) GetFeatureServiceName() string {
	if x != nil {
		return x.FeatureServiceName
	}
	return ""
}

func (x *SavedDatasetSpec) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type SavedDatasetStorage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//	*SavedDatasetStorage_FileStorage
	//	*SavedDatasetStorage_BigqueryStorage
	//	*SavedDatasetStorage_RedshiftStorage
	//	*SavedDatasetStorage_SnowflakeStorage
	//	*SavedDatasetStorage_TrinoStorage
	//	*SavedDatasetStorage_SparkStorage
	//	*SavedDatasetStorage_CustomStorage
	//	*SavedDatasetStorage_AthenaStorage
	Kind isSavedDatasetStorage_Kind `protobuf_oneof:"kind"`
}

func (x *SavedDatasetStorage) Reset() {
	*x = SavedDatasetStorage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_feast_core_SavedDataset_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SavedDatasetStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SavedDatasetStorage) ProtoMessage() {}

func (x *SavedDatasetStorage) ProtoReflect() protoreflect.Message {
	mi := &file_protos_feast_core_SavedDataset_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SavedDatasetStorage.ProtoReflect.Descriptor instead.
func (*SavedDatasetStorage) Descriptor() ([]byte, []int) {
	return file_protos_feast_core_SavedDataset_proto_rawDescGZIP(), []int{1}
}

func (m *SavedDatasetStorage) GetKind() isSavedDatasetStorage_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *SavedDatasetStorage) GetFileStorage() *DataSource_FileOptions {
	if x, ok := x.GetKind().(*SavedDatasetStorage_FileStorage); ok {
		return x.FileStorage
	}
	return nil
}

func (x *SavedDatasetStorage) GetBigqueryStorage() *DataSource_BigQueryOptions {
	if x, ok := x.GetKind().(*SavedDatasetStorage_BigqueryStorage); ok {
		return x.BigqueryStorage
	}
	return nil
}

func (x *SavedDatasetStorage) GetRedshiftStorage() *DataSource_RedshiftOptions {
	if x, ok := x.GetKind().(*SavedDatasetStorage_RedshiftStorage); ok {
		return x.RedshiftStorage
	}
	return nil
}

func (x *SavedDatasetStorage) GetSnowflakeStorage() *DataSource_SnowflakeOptions {
	if x, ok := x.GetKind().(*SavedDatasetStorage_SnowflakeStorage); ok {
		return x.SnowflakeStorage
	}
	return nil
}

func (x *SavedDatasetStorage) GetTrinoStorage() *DataSource_TrinoOptions {
	if x, ok := x.GetKind().(*SavedDatasetStorage_TrinoStorage); ok {
		return x.TrinoStorage
	}
	return nil
}

func (x *SavedDatasetStorage) GetSparkStorage() *DataSource_SparkOptions {
	if x, ok := x.GetKind().(*SavedDatasetStorage_SparkStorage); ok {
		return x.SparkStorage
	}
	return nil
}

func (x *SavedDatasetStorage) GetCustomStorage() *DataSource_CustomSourceOptions {
	if x, ok := x.GetKind().(*SavedDatasetStorage_CustomStorage); ok {
		return x.CustomStorage
	}
	return nil
}

func (x *SavedDatasetStorage) GetAthenaStorage() *DataSource_AthenaOptions {
	if x, ok := x.GetKind().(*SavedDatasetStorage_AthenaStorage); ok {
		return x.AthenaStorage
	}
	return nil
}

type isSavedDatasetStorage_Kind interface {
	isSavedDatasetStorage_Kind()
}

type SavedDatasetStorage_FileStorage struct {
	FileStorage *DataSource_FileOptions `protobuf:"bytes,4,opt,name=file_storage,json=fileStorage,proto3,oneof"`
}

type SavedDatasetStorage_BigqueryStorage struct {
	BigqueryStorage *DataSource_BigQueryOptions `protobuf:"bytes,5,opt,name=bigquery_storage,json=bigqueryStorage,proto3,oneof"`
}

type SavedDatasetStorage_RedshiftStorage struct {
	RedshiftStorage *DataSource_RedshiftOptions `protobuf:"bytes,6,opt,name=redshift_storage,json=redshiftStorage,proto3,oneof"`
}

type SavedDatasetStorage_SnowflakeStorage struct {
	SnowflakeStorage *DataSource_SnowflakeOptions `protobuf:"bytes,7,opt,name=snowflake_storage,json=snowflakeStorage,proto3,oneof"`
}

type SavedDatasetStorage_TrinoStorage struct {
	TrinoStorage *DataSource_TrinoOptions `protobuf:"bytes,8,opt,name=trino_storage,json=trinoStorage,proto3,oneof"`
}

type SavedDatasetStorage_SparkStorage struct {
	SparkStorage *DataSource_SparkOptions `protobuf:"bytes,9,opt,name=spark_storage,json=sparkStorage,proto3,oneof"`
}

type SavedDatasetStorage_CustomStorage struct {
	CustomStorage *DataSource_CustomSourceOptions `protobuf:"bytes,10,opt,name=custom_storage,json=customStorage,proto3,oneof"`
}

type SavedDatasetStorage_AthenaStorage struct {
	AthenaStorage *DataSource_AthenaOptions `protobuf:"bytes,11,opt,name=athena_storage,json=athenaStorage,proto3,oneof"`
}

func (*SavedDatasetStorage_FileStorage) isSavedDatasetStorage_Kind() {}

func (*SavedDatasetStorage_BigqueryStorage) isSavedDatasetStorage_Kind() {}

func (*SavedDatasetStorage_RedshiftStorage) isSavedDatasetStorage_Kind() {}

func (*SavedDatasetStorage_SnowflakeStorage) isSavedDatasetStorage_Kind() {}

func (*SavedDatasetStorage_TrinoStorage) isSavedDatasetStorage_Kind() {}

func (*SavedDatasetStorage_SparkStorage) isSavedDatasetStorage_Kind() {}

func (*SavedDatasetStorage_CustomStorage) isSavedDatasetStorage_Kind() {}

func (*SavedDatasetStorage_AthenaStorage) isSavedDatasetStorage_Kind() {}

type SavedDatasetMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time when this saved dataset is created
	CreatedTimestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_timestamp,json=createdTimestamp,proto3" json:"created_timestamp,omitempty"`
	// Time when this saved dataset is last updated
	LastUpdatedTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_updated_timestamp,json=lastUpdatedTimestamp,proto3" json:"last_updated_timestamp,omitempty"`
	// Min timestamp in the dataset (needed for retrieval)
	MinEventTimestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=min_event_timestamp,json=minEventTimestamp,proto3" json:"min_event_timestamp,omitempty"`
	// Max timestamp in the dataset (needed for retrieval)
	MaxEventTimestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=max_event_timestamp,json=maxEventTimestamp,proto3" json:"max_event_timestamp,omitempty"`
}

func (x *SavedDatasetMeta) Reset() {
	*x = SavedDatasetMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_feast_core_SavedDataset_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SavedDatasetMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SavedDatasetMeta) ProtoMessage() {}

func (x *SavedDatasetMeta) ProtoReflect() protoreflect.Message {
	mi := &file_protos_feast_core_SavedDataset_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SavedDatasetMeta.ProtoReflect.Descriptor instead.
func (*SavedDatasetMeta) Descriptor() ([]byte, []int) {
	return file_protos_feast_core_SavedDataset_proto_rawDescGZIP(), []int{2}
}

func (x *SavedDatasetMeta) GetCreatedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTimestamp
	}
	return nil
}

func (x *SavedDatasetMeta) GetLastUpdatedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedTimestamp
	}
	return nil
}

func (x *SavedDatasetMeta) GetMinEventTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.MinEventTimestamp
	}
	return nil
}

func (x *SavedDatasetMeta) GetMaxEventTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.MaxEventTimestamp
	}
	return nil
}

type SavedDataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec *SavedDatasetSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	Meta *SavedDatasetMeta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *SavedDataset) Reset() {
	*x = SavedDataset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_feast_core_SavedDataset_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SavedDataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SavedDataset) ProtoMessage() {}

func (x *SavedDataset) ProtoReflect() protoreflect.Message {
	mi := &file_protos_feast_core_SavedDataset_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SavedDataset.ProtoReflect.Descriptor instead.
func (*SavedDataset) Descriptor() ([]byte, []int) {
	return file_protos_feast_core_SavedDataset_proto_rawDescGZIP(), []int{3}
}

func (x *SavedDataset) GetSpec() *SavedDatasetSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *SavedDataset) GetMeta() *SavedDatasetMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

var File_protos_feast_core_SavedDataset_proto protoreflect.FileDescriptor

var file_protos_feast_core_SavedDataset_proto_rawDesc = []byte{
	0x0a, 0x24, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x66, 0x65, 0x61, 0x73,
	0x74, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x89, 0x03, 0x0a, 0x10, 0x53, 0x61, 0x76, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x4b,
	0x65, 0x79, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x66, 0x75, 0x6c, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x61, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66,
	0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xa4, 0x05, 0x0a, 0x13, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x72, 0x65, 0x64,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x64, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x72,
	0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x56,
	0x0a, 0x11, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x66, 0x65, 0x61, 0x73,
	0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x48, 0x00, 0x52, 0x10, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x6e, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x65, 0x61, 0x73,
	0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x53, 0x70, 0x61, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00,
	0x52, 0x0c, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x53,
	0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x61, 0x74, 0x68, 0x65, 0x6e, 0x61, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x65,
	0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x41, 0x74, 0x68, 0x65, 0x6e, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x74, 0x68, 0x65, 0x6e, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xc5, 0x02, 0x0a, 0x10, 0x53,
	0x61, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x47, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x50, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4a, 0x0a, 0x13, 0x6d, 0x69,
	0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4a, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x11, 0x6d, 0x61, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0x72, 0x0a, 0x0c, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61,
	0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x61, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x31, 0x0a, 0x10, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x11, 0x53, 0x61, 0x76, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x0a, 0x66,
	0x65, 0x61, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_protos_feast_core_SavedDataset_proto_rawDescOnce sync.Once
	file_protos_feast_core_SavedDataset_proto_rawDescData = file_protos_feast_core_SavedDataset_proto_rawDesc
)

func file_protos_feast_core_SavedDataset_proto_rawDescGZIP() []byte {
	file_protos_feast_core_SavedDataset_proto_rawDescOnce.Do(func() {
		file_protos_feast_core_SavedDataset_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_feast_core_SavedDataset_proto_rawDescData)
	})
	return file_protos_feast_core_SavedDataset_proto_rawDescData
}

var file_protos_feast_core_SavedDataset_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_protos_feast_core_SavedDataset_proto_goTypes = []interface{}{
	(*SavedDatasetSpec)(nil),               // 0: feast.core.SavedDatasetSpec
	(*SavedDatasetStorage)(nil),            // 1: feast.core.SavedDatasetStorage
	(*SavedDatasetMeta)(nil),               // 2: feast.core.SavedDatasetMeta
	(*SavedDataset)(nil),                   // 3: feast.core.SavedDataset
	nil,                                    // 4: feast.core.SavedDatasetSpec.TagsEntry
	(*DataSource_FileOptions)(nil),         // 5: feast.core.DataSource.FileOptions
	(*DataSource_BigQueryOptions)(nil),     // 6: feast.core.DataSource.BigQueryOptions
	(*DataSource_RedshiftOptions)(nil),     // 7: feast.core.DataSource.RedshiftOptions
	(*DataSource_SnowflakeOptions)(nil),    // 8: feast.core.DataSource.SnowflakeOptions
	(*DataSource_TrinoOptions)(nil),        // 9: feast.core.DataSource.TrinoOptions
	(*DataSource_SparkOptions)(nil),        // 10: feast.core.DataSource.SparkOptions
	(*DataSource_CustomSourceOptions)(nil), // 11: feast.core.DataSource.CustomSourceOptions
	(*DataSource_AthenaOptions)(nil),       // 12: feast.core.DataSource.AthenaOptions
	(*timestamppb.Timestamp)(nil),          // 13: google.protobuf.Timestamp
}
var file_protos_feast_core_SavedDataset_proto_depIdxs = []int32{
	1,  // 0: feast.core.SavedDatasetSpec.storage:type_name -> feast.core.SavedDatasetStorage
	4,  // 1: feast.core.SavedDatasetSpec.tags:type_name -> feast.core.SavedDatasetSpec.TagsEntry
	5,  // 2: feast.core.SavedDatasetStorage.file_storage:type_name -> feast.core.DataSource.FileOptions
	6,  // 3: feast.core.SavedDatasetStorage.bigquery_storage:type_name -> feast.core.DataSource.BigQueryOptions
	7,  // 4: feast.core.SavedDatasetStorage.redshift_storage:type_name -> feast.core.DataSource.RedshiftOptions
	8,  // 5: feast.core.SavedDatasetStorage.snowflake_storage:type_name -> feast.core.DataSource.SnowflakeOptions
	9,  // 6: feast.core.SavedDatasetStorage.trino_storage:type_name -> feast.core.DataSource.TrinoOptions
	10, // 7: feast.core.SavedDatasetStorage.spark_storage:type_name -> feast.core.DataSource.SparkOptions
	11, // 8: feast.core.SavedDatasetStorage.custom_storage:type_name -> feast.core.DataSource.CustomSourceOptions
	12, // 9: feast.core.SavedDatasetStorage.athena_storage:type_name -> feast.core.DataSource.AthenaOptions
	13, // 10: feast.core.SavedDatasetMeta.created_timestamp:type_name -> google.protobuf.Timestamp
	13, // 11: feast.core.SavedDatasetMeta.last_updated_timestamp:type_name -> google.protobuf.Timestamp
	13, // 12: feast.core.SavedDatasetMeta.min_event_timestamp:type_name -> google.protobuf.Timestamp
	13, // 13: feast.core.SavedDatasetMeta.max_event_timestamp:type_name -> google.protobuf.Timestamp
	0,  // 14: feast.core.SavedDataset.spec:type_name -> feast.core.SavedDatasetSpec
	2,  // 15: feast.core.SavedDataset.meta:type_name -> feast.core.SavedDatasetMeta
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_protos_feast_core_SavedDataset_proto_init() }
func file_protos_feast_core_SavedDataset_proto_init() {
	if File_protos_feast_core_SavedDataset_proto != nil {
		return
	}
	file_protos_feast_core_DataSource_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_protos_feast_core_SavedDataset_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SavedDatasetSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_feast_core_SavedDataset_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SavedDatasetStorage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_feast_core_SavedDataset_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SavedDatasetMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_feast_core_SavedDataset_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SavedDataset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protos_feast_core_SavedDataset_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*SavedDatasetStorage_FileStorage)(nil),
		(*SavedDatasetStorage_BigqueryStorage)(nil),
		(*SavedDatasetStorage_RedshiftStorage)(nil),
		(*SavedDatasetStorage_SnowflakeStorage)(nil),
		(*SavedDatasetStorage_TrinoStorage)(nil),
		(*SavedDatasetStorage_SparkStorage)(nil),
		(*SavedDatasetStorage_CustomStorage)(nil),
		(*SavedDatasetStorage_AthenaStorage)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_feast_core_SavedDataset_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_feast_core_SavedDataset_proto_goTypes,
		DependencyIndexes: file_protos_feast_core_SavedDataset_proto_depIdxs,
		MessageInfos:      file_protos_feast_core_SavedDataset_proto_msgTypes,
	}.Build()
	File_protos_feast_core_SavedDataset_proto = out.File
	file_protos_feast_core_SavedDataset_proto_rawDesc = nil
	file_protos_feast_core_SavedDataset_proto_goTypes = nil
	file_protos_feast_core_SavedDataset_proto_depIdxs = nil
}
