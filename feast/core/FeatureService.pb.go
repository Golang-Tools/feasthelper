// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: protos/feast/core/FeatureService.proto

package core

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FeatureService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User-specified specifications of this feature service.
	Spec *FeatureServiceSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	// System-populated metadata for this feature service.
	Meta *FeatureServiceMeta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *FeatureService) Reset() {
	*x = FeatureService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_feast_core_FeatureService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureService) ProtoMessage() {}

func (x *FeatureService) ProtoReflect() protoreflect.Message {
	mi := &file_protos_feast_core_FeatureService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureService.ProtoReflect.Descriptor instead.
func (*FeatureService) Descriptor() ([]byte, []int) {
	return file_protos_feast_core_FeatureService_proto_rawDescGZIP(), []int{0}
}

func (x *FeatureService) GetSpec() *FeatureServiceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *FeatureService) GetMeta() *FeatureServiceMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type FeatureServiceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the Feature Service. Must be unique. Not updated.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Name of Feast project that this Feature Service belongs to.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Represents a projection that's to be applied on top of the FeatureView.
	// Contains data such as the features to use from a FeatureView.
	Features []*FeatureViewProjection `protobuf:"bytes,3,rep,name=features,proto3" json:"features,omitempty"`
	// User defined metadata
	Tags map[string]string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Description of the feature service.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Owner of the feature service.
	Owner string `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`
	// (optional) if provided logging will be enabled for this feature service.
	LoggingConfig *LoggingConfig `protobuf:"bytes,7,opt,name=logging_config,json=loggingConfig,proto3" json:"logging_config,omitempty"`
}

func (x *FeatureServiceSpec) Reset() {
	*x = FeatureServiceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_feast_core_FeatureService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureServiceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureServiceSpec) ProtoMessage() {}

func (x *FeatureServiceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_protos_feast_core_FeatureService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureServiceSpec.ProtoReflect.Descriptor instead.
func (*FeatureServiceSpec) Descriptor() ([]byte, []int) {
	return file_protos_feast_core_FeatureService_proto_rawDescGZIP(), []int{1}
}

func (x *FeatureServiceSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FeatureServiceSpec) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *FeatureServiceSpec) GetFeatures() []*FeatureViewProjection {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *FeatureServiceSpec) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *FeatureServiceSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FeatureServiceSpec) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *FeatureServiceSpec) GetLoggingConfig() *LoggingConfig {
	if x != nil {
		return x.LoggingConfig
	}
	return nil
}

type FeatureServiceMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time where this Feature Service is created
	CreatedTimestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_timestamp,json=createdTimestamp,proto3" json:"created_timestamp,omitempty"`
	// Time where this Feature Service is last updated
	LastUpdatedTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_updated_timestamp,json=lastUpdatedTimestamp,proto3" json:"last_updated_timestamp,omitempty"`
}

func (x *FeatureServiceMeta) Reset() {
	*x = FeatureServiceMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_feast_core_FeatureService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureServiceMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureServiceMeta) ProtoMessage() {}

func (x *FeatureServiceMeta) ProtoReflect() protoreflect.Message {
	mi := &file_protos_feast_core_FeatureService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureServiceMeta.ProtoReflect.Descriptor instead.
func (*FeatureServiceMeta) Descriptor() ([]byte, []int) {
	return file_protos_feast_core_FeatureService_proto_rawDescGZIP(), []int{2}
}

func (x *FeatureServiceMeta) GetCreatedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTimestamp
	}
	return nil
}

func (x *FeatureServiceMeta) GetLastUpdatedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedTimestamp
	}
	return nil
}

type LoggingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleRate float32 `protobuf:"fixed32,1,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	// Types that are assignable to Destination:
	//	*LoggingConfig_FileDestination_
	//	*LoggingConfig_BigqueryDestination
	//	*LoggingConfig_RedshiftDestination_
	//	*LoggingConfig_SnowflakeDestination_
	//	*LoggingConfig_CustomDestination_
	//	*LoggingConfig_AthenaDestination_
	Destination isLoggingConfig_Destination `protobuf_oneof:"destination"`
}

func (x *LoggingConfig) Reset() {
	*x = LoggingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_feast_core_FeatureService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggingConfig) ProtoMessage() {}

func (x *LoggingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_feast_core_FeatureService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggingConfig.ProtoReflect.Descriptor instead.
func (*LoggingConfig) Descriptor() ([]byte, []int) {
	return file_protos_feast_core_FeatureService_proto_rawDescGZIP(), []int{3}
}

func (x *LoggingConfig) GetSampleRate() float32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (m *LoggingConfig) GetDestination() isLoggingConfig_Destination {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (x *LoggingConfig) GetFileDestination() *LoggingConfig_FileDestination {
	if x, ok := x.GetDestination().(*LoggingConfig_FileDestination_); ok {
		return x.FileDestination
	}
	return nil
}

func (x *LoggingConfig) GetBigqueryDestination() *LoggingConfig_BigQueryDestination {
	if x, ok := x.GetDestination().(*LoggingConfig_BigqueryDestination); ok {
		return x.BigqueryDestination
	}
	return nil
}

func (x *LoggingConfig) GetRedshiftDestination() *LoggingConfig_RedshiftDestination {
	if x, ok := x.GetDestination().(*LoggingConfig_RedshiftDestination_); ok {
		return x.RedshiftDestination
	}
	return nil
}

func (x *LoggingConfig) GetSnowflakeDestination() *LoggingConfig_SnowflakeDestination {
	if x, ok := x.GetDestination().(*LoggingConfig_SnowflakeDestination_); ok {
		return x.SnowflakeDestination
	}
	return nil
}

func (x *LoggingConfig) GetCustomDestination() *LoggingConfig_CustomDestination {
	if x, ok := x.GetDestination().(*LoggingConfig_CustomDestination_); ok {
		return x.CustomDestination
	}
	return nil
}

func (x *LoggingConfig) GetAthenaDestination() *LoggingConfig_AthenaDestination {
	if x, ok := x.GetDestination().(*LoggingConfig_AthenaDestination_); ok {
		return x.AthenaDestination
	}
	return nil
}

type isLoggingConfig_Destination interface {
	isLoggingConfig_Destination()
}

type LoggingConfig_FileDestination_ struct {
	FileDestination *LoggingConfig_FileDestination `protobuf:"bytes,3,opt,name=file_destination,json=fileDestination,proto3,oneof"`
}

type LoggingConfig_BigqueryDestination struct {
	BigqueryDestination *LoggingConfig_BigQueryDestination `protobuf:"bytes,4,opt,name=bigquery_destination,json=bigqueryDestination,proto3,oneof"`
}

type LoggingConfig_RedshiftDestination_ struct {
	RedshiftDestination *LoggingConfig_RedshiftDestination `protobuf:"bytes,5,opt,name=redshift_destination,json=redshiftDestination,proto3,oneof"`
}

type LoggingConfig_SnowflakeDestination_ struct {
	SnowflakeDestination *LoggingConfig_SnowflakeDestination `protobuf:"bytes,6,opt,name=snowflake_destination,json=snowflakeDestination,proto3,oneof"`
}

type LoggingConfig_CustomDestination_ struct {
	CustomDestination *LoggingConfig_CustomDestination `protobuf:"bytes,7,opt,name=custom_destination,json=customDestination,proto3,oneof"`
}

type LoggingConfig_AthenaDestination_ struct {
	AthenaDestination *LoggingConfig_AthenaDestination `protobuf:"bytes,8,opt,name=athena_destination,json=athenaDestination,proto3,oneof"`
}

func (*LoggingConfig_FileDestination_) isLoggingConfig_Destination() {}

func (*LoggingConfig_BigqueryDestination) isLoggingConfig_Destination() {}

func (*LoggingConfig_RedshiftDestination_) isLoggingConfig_Destination() {}

func (*LoggingConfig_SnowflakeDestination_) isLoggingConfig_Destination() {}

func (*LoggingConfig_CustomDestination_) isLoggingConfig_Destination() {}

func (*LoggingConfig_AthenaDestination_) isLoggingConfig_Destination() {}

type LoggingConfig_FileDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path               string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	S3EndpointOverride string `protobuf:"bytes,2,opt,name=s3_endpoint_override,json=s3EndpointOverride,proto3" json:"s3_endpoint_override,omitempty"`
	// column names to use for partitioning
	PartitionBy []string `protobuf:"bytes,3,rep,name=partition_by,json=partitionBy,proto3" json:"partition_by,omitempty"`
}

func (x *LoggingConfig_FileDestination) Reset() {
	*x = LoggingConfig_FileDestination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_feast_core_FeatureService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggingConfig_FileDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggingConfig_FileDestination) ProtoMessage() {}

func (x *LoggingConfig_FileDestination) ProtoReflect() protoreflect.Message {
	mi := &file_protos_feast_core_FeatureService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggingConfig_FileDestination.ProtoReflect.Descriptor instead.
func (*LoggingConfig_FileDestination) Descriptor() ([]byte, []int) {
	return file_protos_feast_core_FeatureService_proto_rawDescGZIP(), []int{3, 0}
}

func (x *LoggingConfig_FileDestination) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *LoggingConfig_FileDestination) GetS3EndpointOverride() string {
	if x != nil {
		return x.S3EndpointOverride
	}
	return ""
}

func (x *LoggingConfig_FileDestination) GetPartitionBy() []string {
	if x != nil {
		return x.PartitionBy
	}
	return nil
}

type LoggingConfig_BigQueryDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Full table reference in the form of [project:dataset.table]
	TableRef string `protobuf:"bytes,1,opt,name=table_ref,json=tableRef,proto3" json:"table_ref,omitempty"`
}

func (x *LoggingConfig_BigQueryDestination) Reset() {
	*x = LoggingConfig_BigQueryDestination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_feast_core_FeatureService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggingConfig_BigQueryDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggingConfig_BigQueryDestination) ProtoMessage() {}

func (x *LoggingConfig_BigQueryDestination) ProtoReflect() protoreflect.Message {
	mi := &file_protos_feast_core_FeatureService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggingConfig_BigQueryDestination.ProtoReflect.Descriptor instead.
func (*LoggingConfig_BigQueryDestination) Descriptor() ([]byte, []int) {
	return file_protos_feast_core_FeatureService_proto_rawDescGZIP(), []int{3, 1}
}

func (x *LoggingConfig_BigQueryDestination) GetTableRef() string {
	if x != nil {
		return x.TableRef
	}
	return ""
}

type LoggingConfig_RedshiftDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Destination table name. ClusterId and database will be taken from an offline store config
	TableName string `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
}

func (x *LoggingConfig_RedshiftDestination) Reset() {
	*x = LoggingConfig_RedshiftDestination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_feast_core_FeatureService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggingConfig_RedshiftDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggingConfig_RedshiftDestination) ProtoMessage() {}

func (x *LoggingConfig_RedshiftDestination) ProtoReflect() protoreflect.Message {
	mi := &file_protos_feast_core_FeatureService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggingConfig_RedshiftDestination.ProtoReflect.Descriptor instead.
func (*LoggingConfig_RedshiftDestination) Descriptor() ([]byte, []int) {
	return file_protos_feast_core_FeatureService_proto_rawDescGZIP(), []int{3, 2}
}

func (x *LoggingConfig_RedshiftDestination) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

type LoggingConfig_AthenaDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Destination table name. data_source and database will be taken from an offline store config
	TableName string `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
}

func (x *LoggingConfig_AthenaDestination) Reset() {
	*x = LoggingConfig_AthenaDestination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_feast_core_FeatureService_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggingConfig_AthenaDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggingConfig_AthenaDestination) ProtoMessage() {}

func (x *LoggingConfig_AthenaDestination) ProtoReflect() protoreflect.Message {
	mi := &file_protos_feast_core_FeatureService_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggingConfig_AthenaDestination.ProtoReflect.Descriptor instead.
func (*LoggingConfig_AthenaDestination) Descriptor() ([]byte, []int) {
	return file_protos_feast_core_FeatureService_proto_rawDescGZIP(), []int{3, 3}
}

func (x *LoggingConfig_AthenaDestination) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

type LoggingConfig_SnowflakeDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Destination table name. Schema and database will be taken from an offline store config
	TableName string `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
}

func (x *LoggingConfig_SnowflakeDestination) Reset() {
	*x = LoggingConfig_SnowflakeDestination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_feast_core_FeatureService_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggingConfig_SnowflakeDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggingConfig_SnowflakeDestination) ProtoMessage() {}

func (x *LoggingConfig_SnowflakeDestination) ProtoReflect() protoreflect.Message {
	mi := &file_protos_feast_core_FeatureService_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggingConfig_SnowflakeDestination.ProtoReflect.Descriptor instead.
func (*LoggingConfig_SnowflakeDestination) Descriptor() ([]byte, []int) {
	return file_protos_feast_core_FeatureService_proto_rawDescGZIP(), []int{3, 4}
}

func (x *LoggingConfig_SnowflakeDestination) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

type LoggingConfig_CustomDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind   string            `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Config map[string]string `protobuf:"bytes,2,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LoggingConfig_CustomDestination) Reset() {
	*x = LoggingConfig_CustomDestination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_feast_core_FeatureService_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggingConfig_CustomDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggingConfig_CustomDestination) ProtoMessage() {}

func (x *LoggingConfig_CustomDestination) ProtoReflect() protoreflect.Message {
	mi := &file_protos_feast_core_FeatureService_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggingConfig_CustomDestination.ProtoReflect.Descriptor instead.
func (*LoggingConfig_CustomDestination) Descriptor() ([]byte, []int) {
	return file_protos_feast_core_FeatureService_proto_rawDescGZIP(), []int{3, 5}
}

func (x *LoggingConfig_CustomDestination) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *LoggingConfig_CustomDestination) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

var File_protos_feast_core_FeatureService_proto protoreflect.FileDescriptor

var file_protos_feast_core_FeatureService_proto_rawDesc = []byte{
	0x0a, 0x26, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x66, 0x65,
	0x61, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x78, 0x0a, 0x0e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x32, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0xf2,
	0x02, 0x0a, 0x12, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xaf, 0x01, 0x0a, 0x12, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x11, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x50, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x14, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x89, 0x09, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x62, 0x0a, 0x14, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x13, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x14, 0x72, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65,
	0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x15, 0x73, 0x6e, 0x6f, 0x77,
	0x66, 0x6c, 0x61, 0x6b, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x73, 0x6e, 0x6f, 0x77, 0x66,
	0x6c, 0x61, 0x6b, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5c, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x65,
	0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a,
	0x12, 0x61, 0x74, 0x68, 0x65, 0x6e, 0x61, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x65, 0x61, 0x73,
	0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x74, 0x68, 0x65, 0x6e, 0x61, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x61, 0x74, 0x68, 0x65, 0x6e, 0x61,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x7a, 0x0a, 0x0f, 0x46,
	0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x33, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x73, 0x33, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x1a, 0x32, 0x0a, 0x13, 0x42, 0x69, 0x67, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x1a, 0x34, 0x0a, 0x13, 0x52,
	0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x1a, 0x32, 0x0a, 0x11, 0x41, 0x74, 0x68, 0x65, 0x6e, 0x61, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x35, 0x0a, 0x14, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61,
	0x6b, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xb3, 0x01, 0x0a,
	0x11, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x4f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x33, 0x0a, 0x10, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x13, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x0a, 0x66, 0x65, 0x61, 0x73,
	0x74, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_feast_core_FeatureService_proto_rawDescOnce sync.Once
	file_protos_feast_core_FeatureService_proto_rawDescData = file_protos_feast_core_FeatureService_proto_rawDesc
)

func file_protos_feast_core_FeatureService_proto_rawDescGZIP() []byte {
	file_protos_feast_core_FeatureService_proto_rawDescOnce.Do(func() {
		file_protos_feast_core_FeatureService_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_feast_core_FeatureService_proto_rawDescData)
	})
	return file_protos_feast_core_FeatureService_proto_rawDescData
}

var file_protos_feast_core_FeatureService_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_protos_feast_core_FeatureService_proto_goTypes = []interface{}{
	(*FeatureService)(nil),                     // 0: feast.core.FeatureService
	(*FeatureServiceSpec)(nil),                 // 1: feast.core.FeatureServiceSpec
	(*FeatureServiceMeta)(nil),                 // 2: feast.core.FeatureServiceMeta
	(*LoggingConfig)(nil),                      // 3: feast.core.LoggingConfig
	nil,                                        // 4: feast.core.FeatureServiceSpec.TagsEntry
	(*LoggingConfig_FileDestination)(nil),      // 5: feast.core.LoggingConfig.FileDestination
	(*LoggingConfig_BigQueryDestination)(nil),  // 6: feast.core.LoggingConfig.BigQueryDestination
	(*LoggingConfig_RedshiftDestination)(nil),  // 7: feast.core.LoggingConfig.RedshiftDestination
	(*LoggingConfig_AthenaDestination)(nil),    // 8: feast.core.LoggingConfig.AthenaDestination
	(*LoggingConfig_SnowflakeDestination)(nil), // 9: feast.core.LoggingConfig.SnowflakeDestination
	(*LoggingConfig_CustomDestination)(nil),    // 10: feast.core.LoggingConfig.CustomDestination
	nil,                                        // 11: feast.core.LoggingConfig.CustomDestination.ConfigEntry
	(*FeatureViewProjection)(nil),              // 12: feast.core.FeatureViewProjection
	(*timestamppb.Timestamp)(nil),              // 13: google.protobuf.Timestamp
}
var file_protos_feast_core_FeatureService_proto_depIdxs = []int32{
	1,  // 0: feast.core.FeatureService.spec:type_name -> feast.core.FeatureServiceSpec
	2,  // 1: feast.core.FeatureService.meta:type_name -> feast.core.FeatureServiceMeta
	12, // 2: feast.core.FeatureServiceSpec.features:type_name -> feast.core.FeatureViewProjection
	4,  // 3: feast.core.FeatureServiceSpec.tags:type_name -> feast.core.FeatureServiceSpec.TagsEntry
	3,  // 4: feast.core.FeatureServiceSpec.logging_config:type_name -> feast.core.LoggingConfig
	13, // 5: feast.core.FeatureServiceMeta.created_timestamp:type_name -> google.protobuf.Timestamp
	13, // 6: feast.core.FeatureServiceMeta.last_updated_timestamp:type_name -> google.protobuf.Timestamp
	5,  // 7: feast.core.LoggingConfig.file_destination:type_name -> feast.core.LoggingConfig.FileDestination
	6,  // 8: feast.core.LoggingConfig.bigquery_destination:type_name -> feast.core.LoggingConfig.BigQueryDestination
	7,  // 9: feast.core.LoggingConfig.redshift_destination:type_name -> feast.core.LoggingConfig.RedshiftDestination
	9,  // 10: feast.core.LoggingConfig.snowflake_destination:type_name -> feast.core.LoggingConfig.SnowflakeDestination
	10, // 11: feast.core.LoggingConfig.custom_destination:type_name -> feast.core.LoggingConfig.CustomDestination
	8,  // 12: feast.core.LoggingConfig.athena_destination:type_name -> feast.core.LoggingConfig.AthenaDestination
	11, // 13: feast.core.LoggingConfig.CustomDestination.config:type_name -> feast.core.LoggingConfig.CustomDestination.ConfigEntry
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_protos_feast_core_FeatureService_proto_init() }
func file_protos_feast_core_FeatureService_proto_init() {
	if File_protos_feast_core_FeatureService_proto != nil {
		return
	}
	file_protos_feast_core_FeatureViewProjection_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_protos_feast_core_FeatureService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_feast_core_FeatureService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureServiceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_feast_core_FeatureService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureServiceMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_feast_core_FeatureService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_feast_core_FeatureService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggingConfig_FileDestination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_feast_core_FeatureService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggingConfig_BigQueryDestination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_feast_core_FeatureService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggingConfig_RedshiftDestination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_feast_core_FeatureService_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggingConfig_AthenaDestination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_feast_core_FeatureService_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggingConfig_SnowflakeDestination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_feast_core_FeatureService_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggingConfig_CustomDestination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protos_feast_core_FeatureService_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*LoggingConfig_FileDestination_)(nil),
		(*LoggingConfig_BigqueryDestination)(nil),
		(*LoggingConfig_RedshiftDestination_)(nil),
		(*LoggingConfig_SnowflakeDestination_)(nil),
		(*LoggingConfig_CustomDestination_)(nil),
		(*LoggingConfig_AthenaDestination_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_feast_core_FeatureService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_feast_core_FeatureService_proto_goTypes,
		DependencyIndexes: file_protos_feast_core_FeatureService_proto_depIdxs,
		MessageInfos:      file_protos_feast_core_FeatureService_proto_msgTypes,
	}.Build()
	File_protos_feast_core_FeatureService_proto = out.File
	file_protos_feast_core_FeatureService_proto_rawDesc = nil
	file_protos_feast_core_FeatureService_proto_goTypes = nil
	file_protos_feast_core_FeatureService_proto_depIdxs = nil
}
