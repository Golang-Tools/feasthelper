// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: protos/feast/serving/TransformationService.proto

package serving

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransformationServiceClient is the client API for TransformationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransformationServiceClient interface {
	GetTransformationServiceInfo(ctx context.Context, in *GetTransformationServiceInfoRequest, opts ...grpc.CallOption) (*GetTransformationServiceInfoResponse, error)
	TransformFeatures(ctx context.Context, in *TransformFeaturesRequest, opts ...grpc.CallOption) (*TransformFeaturesResponse, error)
}

type transformationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransformationServiceClient(cc grpc.ClientConnInterface) TransformationServiceClient {
	return &transformationServiceClient{cc}
}

func (c *transformationServiceClient) GetTransformationServiceInfo(ctx context.Context, in *GetTransformationServiceInfoRequest, opts ...grpc.CallOption) (*GetTransformationServiceInfoResponse, error) {
	out := new(GetTransformationServiceInfoResponse)
	err := c.cc.Invoke(ctx, "/feast.serving.TransformationService/GetTransformationServiceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transformationServiceClient) TransformFeatures(ctx context.Context, in *TransformFeaturesRequest, opts ...grpc.CallOption) (*TransformFeaturesResponse, error) {
	out := new(TransformFeaturesResponse)
	err := c.cc.Invoke(ctx, "/feast.serving.TransformationService/TransformFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransformationServiceServer is the server API for TransformationService service.
// All implementations must embed UnimplementedTransformationServiceServer
// for forward compatibility
type TransformationServiceServer interface {
	GetTransformationServiceInfo(context.Context, *GetTransformationServiceInfoRequest) (*GetTransformationServiceInfoResponse, error)
	TransformFeatures(context.Context, *TransformFeaturesRequest) (*TransformFeaturesResponse, error)
	mustEmbedUnimplementedTransformationServiceServer()
}

// UnimplementedTransformationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransformationServiceServer struct {
}

func (UnimplementedTransformationServiceServer) GetTransformationServiceInfo(context.Context, *GetTransformationServiceInfoRequest) (*GetTransformationServiceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransformationServiceInfo not implemented")
}
func (UnimplementedTransformationServiceServer) TransformFeatures(context.Context, *TransformFeaturesRequest) (*TransformFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransformFeatures not implemented")
}
func (UnimplementedTransformationServiceServer) mustEmbedUnimplementedTransformationServiceServer() {}

// UnsafeTransformationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransformationServiceServer will
// result in compilation errors.
type UnsafeTransformationServiceServer interface {
	mustEmbedUnimplementedTransformationServiceServer()
}

func RegisterTransformationServiceServer(s grpc.ServiceRegistrar, srv TransformationServiceServer) {
	s.RegisterService(&TransformationService_ServiceDesc, srv)
}

func _TransformationService_GetTransformationServiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransformationServiceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformationServiceServer).GetTransformationServiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feast.serving.TransformationService/GetTransformationServiceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformationServiceServer).GetTransformationServiceInfo(ctx, req.(*GetTransformationServiceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransformationService_TransformFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransformFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformationServiceServer).TransformFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feast.serving.TransformationService/TransformFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformationServiceServer).TransformFeatures(ctx, req.(*TransformFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransformationService_ServiceDesc is the grpc.ServiceDesc for TransformationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransformationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feast.serving.TransformationService",
	HandlerType: (*TransformationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransformationServiceInfo",
			Handler:    _TransformationService_GetTransformationServiceInfo_Handler,
		},
		{
			MethodName: "TransformFeatures",
			Handler:    _TransformationService_TransformFeatures_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/feast/serving/TransformationService.proto",
}
