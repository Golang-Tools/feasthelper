// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: protos/feast/serving/Connector.proto

package serving

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OnlineStoreClient is the client API for OnlineStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OnlineStoreClient interface {
	OnlineRead(ctx context.Context, in *OnlineReadRequest, opts ...grpc.CallOption) (*OnlineReadResponse, error)
}

type onlineStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewOnlineStoreClient(cc grpc.ClientConnInterface) OnlineStoreClient {
	return &onlineStoreClient{cc}
}

func (c *onlineStoreClient) OnlineRead(ctx context.Context, in *OnlineReadRequest, opts ...grpc.CallOption) (*OnlineReadResponse, error) {
	out := new(OnlineReadResponse)
	err := c.cc.Invoke(ctx, "/grpc.connector.OnlineStore/OnlineRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnlineStoreServer is the server API for OnlineStore service.
// All implementations must embed UnimplementedOnlineStoreServer
// for forward compatibility
type OnlineStoreServer interface {
	OnlineRead(context.Context, *OnlineReadRequest) (*OnlineReadResponse, error)
	mustEmbedUnimplementedOnlineStoreServer()
}

// UnimplementedOnlineStoreServer must be embedded to have forward compatible implementations.
type UnimplementedOnlineStoreServer struct {
}

func (UnimplementedOnlineStoreServer) OnlineRead(context.Context, *OnlineReadRequest) (*OnlineReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnlineRead not implemented")
}
func (UnimplementedOnlineStoreServer) mustEmbedUnimplementedOnlineStoreServer() {}

// UnsafeOnlineStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnlineStoreServer will
// result in compilation errors.
type UnsafeOnlineStoreServer interface {
	mustEmbedUnimplementedOnlineStoreServer()
}

func RegisterOnlineStoreServer(s grpc.ServiceRegistrar, srv OnlineStoreServer) {
	s.RegisterService(&OnlineStore_ServiceDesc, srv)
}

func _OnlineStore_OnlineRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineStoreServer).OnlineRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.connector.OnlineStore/OnlineRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineStoreServer).OnlineRead(ctx, req.(*OnlineReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OnlineStore_ServiceDesc is the grpc.ServiceDesc for OnlineStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OnlineStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.connector.OnlineStore",
	HandlerType: (*OnlineStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnlineRead",
			Handler:    _OnlineStore_OnlineRead_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/feast/serving/Connector.proto",
}
